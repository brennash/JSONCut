# !/usr/bin/env python
#title           :jc (JSONCut)
#description     :Just multiple similar JSON strings by field/key.
#author          :Shane Brennan
#date            :20111109
#version         :0.1
#usage           :python js / ./jc
#notes           :
#python_version  :2.7.3
#==============================================================================

import sys
import os
import json
import re
from collections import OrderedDict
from optparse import OptionParser

class JSONCut:
	def __init__(self, listFlag, keyArgs, delimArgs, fieldArgs, filename):
		# Open the file up for loading and read the first line
		file = open(filename, "r")
		firstLine = file.readline()
		firstJSON = json.loads(firstLine, object_pairs_hook = OrderedDict)
		file.seek(0)

		if listFlag:
			listKeys = firstJSON.keys()
			for key in listKeys:
				print key

		# Set the output delimiter
		if delimArgs == "\t":
			delim = '\t'
		elif delimArgs == ",":
			delim = ','
		elif delimArgs == " ":
			delim = ' '
		elif delimArgs == "":
			delim = ''
		else:
			delim = delimArgs

		# Process the fields
		if fieldArgs is not None:
			fieldsList = self.getFields(fieldArgs, firstJSON)

			# Load and process the rest of the file line by line
			jsonDict = json.loads(firstLine, object_pairs_hook = OrderedDict)

			outputKeys = []
			for field in fieldsList:
				outputKeys.append(str(jsonDict.keys()[field - 1]))

			for line in file:
				outputStrList = []
				jsonDict = json.loads(line, object_pairs_hook = OrderedDict)		
				for key in outputKeys:
					outputStrList.append(str(jsonDict[key]))

				print delim.join(outputStrList)


	def getFields(self, fieldArgs, jsonDict):
		startRegex = re.compile('^-[0-9]+$')
		rangeRegex = re.compile('^[0-9]+-[0-9]+$')
		singleRegex = re.compile('^[0-9]+$')
		endRegex = re.compile('^[0-9]+-$')
		fields = []
		maxFields = len(jsonDict.keys())
		
		fieldTokens = fieldArgs.split(',')

		if len(fieldTokens) == 0:
			print "Error, you need to specify the fields correctly..."
			exit(1)

		# Take care of the case with a starting field, e.g., -5
		if startRegex.match(fieldTokens[0]):
			for x in xrange(0, int(fieldTokens[0])):
				fields.append(x)

		# Handle other fields
		for token in fieldTokens:
			if rangeRegex.match(token):
				rangeToken = token.split('-')
				startRange = int(rangeToken[0])
				endRange = int(rangeToken[1]) + 1
				if endRange <= startRange:
					print "Error, start({0}) and end({1}) ranges should be in order".format(startRange, endRange)
				for x in xrange(startRange, endRange):
					fields.append(x)

			elif singleRegex.match(token):
				fields.append(int(token))
	
		# Take care of the ending field, e.g.3 -
		if endRegex.match(fieldTokens[-1]):
			rangeToken = token.split('-')
			for x in xrange(int(rangeToken[0]), maxFields + 1):
				fields.append(x)

		return fields


def main(argv):
	parser = OptionParser(usage = "Usage: jc [OPTIONS] [-f|--fields] <json-file>")

	parser.add_option("-l", "--list",
	action = "store_true",
	dest = "listFlag",
	default = False,
	help = "output the common JSON keys")

	parser.add_option("-k", "--key",
	action = "store_true",
	dest = "keyArgs",
	default = False,
	help = "output field of the given key")

	parser.add_option("-d", "--delimiter",
	action = 'store',
	dest = 'delim_Args',
	default = ' ',
	help = 'delimiter character')

	parser.add_option("-f", "--field",
	action = 'store',
	dest = 'field_Args',
	default = None,
	help = 'output the field of the given index')

	(options, filename) = parser.parse_args()

	if len(filename) != 1:
		parser.print_help()
		sys.exit(1)

	if os.path.exists(filename[0]) == False:
		parser.print_help()
		print "\nFilename (", filename[0], ") doesn't exist..."
		sys.exit(1)

	if os.path.isfile(filename[0]) == False:
		parser.print_help()
		print "\n", filename[0], " needs to be a file..."
		sys.exit(1)

	if options.keyArgs is None and options.field_Args is None:
		parser.print_help()
		print "\nOnly specify either unique or common JSON keys..."
		sys.exit(1)

	jc = JSONCut(options.listFlag, options.keyArgs, options.delim_Args, options.field_Args, filename[0])

if __name__ == "__main__":
	sys.exit(main(sys.argv))
